# Build script for gcc
#
# Copyright (C) 2014-2015 Matias A. Fonzo.
#
# This script is free software: you have unlimited permission
# to copy, distribute and modify it.

version=5.2.0

echo "Unpacking gcc-${version} ..."
rm -rf "${tmpdir}"/sources/gcc-${version}
tar xf "${worktree}"/sources/gcc-${version}.tar.lz -C "${tmpdir}"/sources

# Build instructions
cd "${tmpdir}"/sources/gcc-${version}

patch -Np0 -i "${worktree}"/patches/gcc/gcc-nofixincludes
patch -Np1 -i "${worktree}"/patches/gcc/gcc-5.2.0-combined.diff

for file in \
 gcc/config/linux.h gcc/config/i386/linux.h gcc/config/i386/linux64.h \
 gcc/config/arm/linux-eabi.h gcc/config/arm/linux-elf.h \
 gcc/config/mips/linux64.h gcc/config/mips/linux.h \
 gcc/config/rs6000/linux64.h gcc/config/rs6000/sysv4.h \
 gcc/config/aarch64/aarch64-linux.h \
 gcc/config/microblaze/linux.h \
 gcc/config/sh/linux.h ; \
do \
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
done

# Build GCC built-in prerequisites
for file in "${worktree}"/sources/gmp-*.tar.lz "${worktree}"/sources/mpfr-*.tar.bz2 "${worktree}"/sources/mpc-*.tar.gz ; do
  if [ ! -e "$file" ] ; then
    echo "The built-in prerequisite \`${file##*/}' for GCC is required." 1>&2
    exit 1
  fi

  # Unpack prerequisite
  tar xf "$file"

  # Basename
  file="${file##*/}"
  file="${file%.tar*}"

  # To extract name and version
  name="${file%-*}"
  vern="${file#*-}"

  # Remove any words from the version number
  vern="$(printf %s "$vern" | tr -d '[:lower:]')"

  # Move the source as the expected directory name
  mv "${name}-${vern}" "$name"
done
unset file name vern

# Provide an (official) updated version of the config.sub file
# in order to match correctly the target triplet for a musl OS.
#
# This is until new versions could provide the updated file.
#
cp -f "${worktree}"/patches/common/config.sub gmp/configfsf.sub

# Build in a separate directory
rm -rf ../gcc-build
mkdir ../gcc-build
cd ../gcc-build

# Import and export toolchain variables
. "${worktree}"/stage.d/env.d/cross-env

../gcc-${version}/configure \
 --prefix=/tools \
 --enable-languages=c,c++ \
 --enable-clocale=generic \
 --enable-threads=posix \
 --enable-__cxa_atexit \
 --enable-checking=release \
 --build=$host \
 --host=$TARGET \
 --target=$TARGET \
 --with-local-prefix=/tools \
 --with-native-system-header-dir=/tools/include \
 --with-mpfr-include="${PWD}"/../gcc-${version}/mpfr/src \
 --with-mpfr-lib="${PWD}"/mpfr/src/.libs \
 --disable-shared \
 --disable-nls \
 --disable-libgomp \
 --disable-libmudflap \
 --disable-libsanitizer \
 --disable-libstdcxx-pch \
 --disable-libstdcxx-verbose \
 --without-ppl \
 --without-cloog \
 $GCC_OPTS $MULTILIB

sed -i.orig "/^host_\(GMP\|ISL\|CLOOG\)\(LIBS\|INC\)/s:/tools:$crossdir:g" Makefile

make -j${jobs} AS_FOR_target="$AS" LD_FOR_target="$LD"
make install

# Symlink for compatibility
ln -s gcc /tools/bin/cc

# Unset imported variables from file
unset CC CXX AR AS LD RANLIB READELF STRIP

