Origin: http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blobdiff_plain;f=g10%2Fimport.c;h=90fc2d67885b1e31523cea70d3855a1d07951b0b;hp=21ada4197d892f7b3bbf3da95736d373e915664a;hb=f795a0d59e197455f8723c300eebf59e09853efa;hpb=5c557a51cdf37d9f50b3d5d7e11d17e6ea6bb2b8
Description: Fix memory and key database corruption on importing invalid keys by rejecting invalid keyblock packet types.
Applied-Upstream: yes
Bug-Debian: http://bugs.debian.org/697108

--- a/g10/import.c
+++ b/g10/import.c
@@ -343,6 +343,27 @@
 }
 
 
+/* Return true if PKTTYPE is valid in a keyblock.  */
+static int
+valid_keyblock_packet (int pkttype)
+{
+  switch (pkttype)
+    {
+    case PKT_PUBLIC_KEY:
+    case PKT_PUBLIC_SUBKEY:
+    case PKT_SECRET_KEY:
+    case PKT_SECRET_SUBKEY:
+    case PKT_SIGNATURE:
+    case PKT_USER_ID:
+    case PKT_ATTRIBUTE:
+    case PKT_RING_TRUST:
+      return 1;
+    default:
+      return 0;
+    }
+}
+
+
 /****************
  * Read the next keyblock from stream A.
  * PENDING_PKT should be initialzed to NULL
@@ -420,7 +441,7 @@
 	    }
 	    in_cert = 1;
 	  default:
-	    if( in_cert ) {
+	    if (in_cert && valid_keyblock_packet (pkt->pkttype)) {
 		if( !root )
 		    root = new_kbnode( pkt );
 		else
