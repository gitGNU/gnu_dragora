#! /bin/sh
#  Copyright (C) 2012-2016  Matias A. Fonzo, selk@dragora.org.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Override locale settings
LC_ALL=C
export LC_ALL

# Exit immediately on any error
set -o errexit

# Get the current working directory: printing the absolute pathname
# or just prints the current directory in case of fails
CWD="$(cd "$(dirname -- "$0" 2> /dev/null)" ; printf %s "$PWD")"

# Functions
unmountSeries() {
  for node in "${rootdir}"/usr/src/qi/archive \
              "${rootdir}"/usr/src/qi/patches \
              "${rootdir}"/usr/src/qi/recipes \
              "${rootdir}"/usr/src/qi/sources \
              "${rootdir}"/sys \
              "${rootdir}"/proc \
              "${rootdir}"/dev/shm \
              "${rootdir}"/dev/pts \
              "${rootdir}"/dev ; \
  do
    if mount | grep -q "$node" ; then
      echo "==> Unmounting \`${node}' ..."
      if ! umount "$node" ; then
        echo "==> Doing a lazy unmount for \`${node}' ..."
        umount -l "$node" && echo Successful.
      fi
    fi
  done
}

# Autodetermine the path of /tools
if [ ! -L /tools ]; then
  echo "Cannot determine \$ROOT. The symlink \"/tools\" doesn't exists."
  exit 1
fi
if [ -L /tools ] && [ ! -e /tools ]; then
  echo "/tools is a dangling symlink."
  exit 1
fi

# Set 'rootdir' getting the canonical directory name
rootdir="$(readlink /tools | sed -e 's/\/tools//')"

# Unmount directories and file systems before the next mounting
unmountSeries

echo "==> Mounting working directory ..."
mkdir -p \
 "${rootdir}"/usr/src/qi/archive \
 "${rootdir}"/usr/src/qi/patches \
 "${rootdir}"/usr/src/qi/recipes \
 "${rootdir}"/usr/src/qi/sources
mount -o bind "${CWD}"/archive  "${rootdir}"/usr/src/qi/archive
mount -o bind "${CWD}"/patches  "${rootdir}"/usr/src/qi/patches
mount -o bind "${CWD}"/recipes  "${rootdir}"/usr/src/qi/recipes
mount -o bind "${CWD}"/sources  "${rootdir}"/usr/src/qi/sources

echo "==> Mounting virtual file systems ..."
mount -o bind /dev      "${rootdir}"/dev
mount -t devpts devpts  "${rootdir}"/dev/pts
mount -t tmpfs shm      "${rootdir}"/dev/shm
mount -t proc proc      "${rootdir}"/proc
mount -t sysfs sysfs    "${rootdir}"/sys

# Add trap for unmount the series, signalled or not
trap 'echo ; unmountSeries' EXIT

echo "==> Entering chroot (${rootdir}) ..."
chroot "$rootdir" /tools/bin/env -i \
  PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
  HOME=/root \
  TERM="${TERM:-linux}" \
  LC_ALL=$LC_ALL \
  PS1='\u:\w\$ ' \
 /tools/bin/bash --login +h

