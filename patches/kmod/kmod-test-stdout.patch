stdout and stderr are names reserved for the implementation
and musl uses them rightfully as macro - and the expansion
causes (of course) unexpected results.

rename the struct members stdout to std_out and stderr
to std_err, to be 1) compliant 2) cause compilation to
succeed.

diff -ur '--exclude=*.o' kmod-15.org/testsuite//test-alias.c kmod-15/testsuite//test-alias.c
--- kmod-15.org/testsuite//test-alias.c	2013-08-26 16:03:22.238000003 +0000
+++ kmod-15/testsuite//test-alias.c	2013-08-26 16:17:55.602000003 +0000
@@ -64,7 +64,7 @@
 	},
 	.need_spawn = true,
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-alias/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-alias/correct.txt",
 	});
 
 static const struct test *tests[] = {
diff -ur '--exclude=*.o' kmod-15.org/testsuite//test-loaded.c kmod-15/testsuite//test-loaded.c
--- kmod-15.org/testsuite//test-loaded.c	2013-08-26 16:03:22.205000003 +0000
+++ kmod-15/testsuite//test-loaded.c	2013-08-26 16:15:43.668000003 +0000
@@ -85,7 +85,7 @@
 	},
 	.need_spawn = true,
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-loaded/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-loaded/correct.txt",
 	});
 
 static const struct test *tests[] = {
diff -ur '--exclude=*.o' kmod-15.org/testsuite//test-modinfo.c kmod-15/testsuite//test-modinfo.c
--- kmod-15.org/testsuite//test-modinfo.c	2013-08-26 16:03:22.238000003 +0000
+++ kmod-15/testsuite//test-modinfo.c	2013-08-26 16:17:23.760000003 +0000
@@ -46,7 +46,7 @@
 		[TC_ROOTFS] = TESTSUITE_ROOTFS "test-modinfo/",
 	},
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-modinfo/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-modinfo/correct.txt",
 	});
 
 static const struct test *tests[] = {
diff -ur '--exclude=*.o' kmod-15.org/testsuite//test-modprobe.c kmod-15/testsuite//test-modprobe.c
--- kmod-15.org/testsuite//test-modprobe.c	2013-08-26 16:03:22.238000003 +0000
+++ kmod-15/testsuite//test-modprobe.c	2013-08-26 16:17:46.188000003 +0000
@@ -45,7 +45,7 @@
 		[TC_ROOTFS] = TESTSUITE_ROOTFS "test-modprobe/show-depends",
 	},
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct.txt",
 	});
 
 static __noreturn int modprobe_show_depends2(const struct test *t)
@@ -67,7 +67,7 @@
 		[TC_ROOTFS] = TESTSUITE_ROOTFS "test-modprobe/show-depends",
 	},
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct-psmouse.txt",
+		.std_out = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct-psmouse.txt",
 	});
 
 
@@ -90,7 +90,7 @@
 		[TC_ROOTFS] = TESTSUITE_ROOTFS "test-modprobe/alias-to-none",
 	},
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct-psmouse.txt",
+		.std_out = TESTSUITE_ROOTFS "test-modprobe/show-depends/correct-psmouse.txt",
 	});
 
 
@@ -177,7 +177,7 @@
 		[TC_ROOTFS] = TESTSUITE_ROOTFS "test-modprobe/module-param-kcmdline",
 	},
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-modprobe/module-param-kcmdline/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-modprobe/module-param-kcmdline/correct.txt",
 	});
 
 
diff -ur '--exclude=*.o' kmod-15.org/testsuite//test-new-module.c kmod-15/testsuite//test-new-module.c
--- kmod-15.org/testsuite//test-new-module.c	2013-08-26 16:03:22.205000003 +0000
+++ kmod-15/testsuite//test-new-module.c	2013-08-26 16:15:24.207000003 +0000
@@ -67,7 +67,7 @@
 	},
 	.need_spawn = true,
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-new-module/from_name/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-new-module/from_name/correct.txt",
 	});
 
 static int from_alias(const struct test *t)
@@ -112,7 +112,7 @@
 	},
 	.need_spawn = true,
 	.output = {
-		.stdout = TESTSUITE_ROOTFS "test-new-module/from_alias/correct.txt",
+		.std_out = TESTSUITE_ROOTFS "test-new-module/from_alias/correct.txt",
 	});
 
 static const struct test *tests[] = {
diff -ur '--exclude=*.o' kmod-15.org/testsuite//testsuite.c kmod-15/testsuite//testsuite.c
--- kmod-15.org/testsuite//testsuite.c	2013-08-26 16:03:22.238000003 +0000
+++ kmod-15/testsuite//testsuite.c	2013-08-26 16:18:30.067000003 +0000
@@ -223,7 +223,7 @@
 	test_export_environ(t);
 
 	/* Close read-fds and redirect std{out,err} to the write-fds */
-	if (t->output.stdout != NULL) {
+	if (t->output.std_out != NULL) {
 		close(fdout[0]);
 		if (dup2(fdout[1], STDOUT_FILENO) < 0) {
 			ERR("could not redirect stdout to pipe: %m\n");
@@ -231,10 +231,10 @@
 		}
 	}
 
-	if (t->output.stderr != NULL) {
+	if (t->output.std_err != NULL) {
 		close(fderr[0]);
 		if (dup2(fderr[1], STDERR_FILENO) < 0) {
-			ERR("could not redirect stdout to pipe: %m\n");
+			ERR("could not redirect stderr to pipe: %m\n");
 			exit(EXIT_FAILURE);
 		}
 	}
@@ -282,12 +282,12 @@
 		return false;
 	}
 
-	if (t->output.stdout != NULL) {
-		fd_matchout = open(t->output.stdout, O_RDONLY);
+	if (t->output.std_out != NULL) {
+		fd_matchout = open(t->output.std_out, O_RDONLY);
 		if (fd_matchout < 0) {
 			err = -errno;
 			ERR("could not open %s for read: %m\n",
-							t->output.stdout);
+							t->output.std_out);
 			goto out;
 		}
 		memset(&ep_outpipe, 0, sizeof(struct epoll_event));
@@ -301,12 +301,12 @@
 	} else
 		fdout = -1;
 
-	if (t->output.stderr != NULL) {
-		fd_matcherr = open(t->output.stderr, O_RDONLY);
+	if (t->output.std_err != NULL) {
+		fd_matcherr = open(t->output.std_err, O_RDONLY);
 		if (fd_matcherr < 0) {
 			err = -errno;
 			ERR("could not open %s for read: %m\n",
-					t->output.stderr);
+					t->output.std_err);
 			goto out;
 
 		}
@@ -536,9 +536,9 @@
 	bool matchout;
 
 	/* Close write-fds */
-	if (t->output.stdout != NULL)
+	if (t->output.std_out != NULL)
 		close(fdout[1]);
-	if (t->output.stderr != NULL)
+	if (t->output.std_err != NULL)
 		close(fderr[1]);
 	close(fdmonitor[1]);
 
@@ -549,9 +549,9 @@
 	 * break pipe on the other end: either child already closed or we want
 	 * to stop it
 	 */
-	if (t->output.stdout != NULL)
+	if (t->output.std_out != NULL)
 		close(fdout[0]);
-	if (t->output.stderr != NULL)
+	if (t->output.std_err != NULL)
 		close(fderr[0]);
 	close(fdmonitor[0]);
 
@@ -650,14 +650,14 @@
 	if (t->need_spawn && oneshot)
 		test_run_spawned(t);
 
-	if (t->output.stdout != NULL) {
+	if (t->output.std_out != NULL) {
 		if (pipe(fdout) != 0) {
 			ERR("could not create out pipe for %s\n", t->name);
 			return EXIT_FAILURE;
 		}
 	}
 
-	if (t->output.stderr != NULL) {
+	if (t->output.std_err != NULL) {
 		if (pipe(fderr) != 0) {
 			ERR("could not create err pipe for %s\n", t->name);
 			return EXIT_FAILURE;
diff -ur '--exclude=*.o' kmod-15.org/testsuite//testsuite.h kmod-15/testsuite//testsuite.h
--- kmod-15.org/testsuite//testsuite.h	2013-08-26 16:03:22.205000003 +0000
+++ kmod-15/testsuite//testsuite.h	2013-08-26 16:14:52.709000003 +0000
@@ -82,9 +82,9 @@
 	const char *description;
 	struct {
 		/* File with correct stdout */
-		const char *stdout;
+		const char *std_out;
 		/* File with correct stderr */
-		const char *stderr;
+		const char *std_err;
 
 		/*
 		 * Vector with pair of files
