--- lib/savewd.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/savewd.c	2013-03-05 19:12:11.000000000 -0300
@@ -47,7 +47,7 @@
     case INITIAL_STATE:
       /* Save the working directory, or prepare to fall back if possible.  */
       {
-        int fd = open_safer (".", O_SEARCH);
+        int fd = open_safer (".", 0);
         if (0 <= fd)
           {
             wd->state = FD_STATE;
@@ -107,7 +107,7 @@
       || (options & (HAVE_WORKING_O_NOFOLLOW ? SAVEWD_CHDIR_NOFOLLOW : 0)))
     {
       fd = open (dir,
-                 (O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK
+                 (O_DIRECTORY | O_NOCTTY | O_NONBLOCK
                   | (options & SAVEWD_CHDIR_NOFOLLOW ? O_NOFOLLOW : 0)));
 
       if (open_result)
--- lib/fts.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/fts.c	2013-03-05 19:18:56.000000000 -0300
@@ -364,7 +364,7 @@
 internal_function
 diropen (FTS const *sp, char const *dir)
 {
-  int open_flags = (O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK
+  int open_flags = (O_DIRECTORY | O_NOCTTY | O_NONBLOCK
                     | (ISSET (FTS_PHYSICAL) ? O_NOFOLLOW : 0)
                     | (ISSET (FTS_NOATIME) ? O_NOATIME : 0));
 
@@ -424,7 +424,7 @@
                later (where it'd be messier) that "." can in fact
                be opened.  If not, revert to FTS_NOCHDIR mode.  */
             int fd = open (".",
-                           O_SEARCH | (ISSET (FTS_NOATIME) ? O_NOATIME : 0));
+                           0 | (ISSET (FTS_NOATIME) ? O_NOATIME : 0));
             if (fd < 0)
               {
                 /* Even if "." is unreadable, don't revert to FTS_NOCHDIR mode
@@ -1752,7 +1752,7 @@
       int fd = i_ring_pop (&fd_w);
       if (0 <= fd)
         {
-          int parent_fd = openat (cwd_fd, "..", O_SEARCH | O_NOATIME);
+          int parent_fd = openat (cwd_fd, "..", 0 | O_NOATIME);
           if (parent_fd < 0)
             {
               // Warn?
--- lib/open.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/open.c	2013-03-05 19:32:37.000000000 -0300
@@ -126,7 +126,7 @@
      dummy.  */
   if (REPLACE_OPEN_DIRECTORY && fd < 0 && errno == EACCES
       && ((flags & O_ACCMODE) == O_RDONLY
-          || (O_SEARCH != O_RDONLY && (flags & O_ACCMODE) == O_SEARCH)))
+          || (0 != O_RDONLY && (flags & O_ACCMODE) == 0)))
     {
       struct stat statbuf;
       if (stat (filename, &statbuf) == 0 && S_ISDIR (statbuf.st_mode))
--- lib/chdir-long.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/chdir-long.c	2013-03-05 19:33:30.000000000 -0300
@@ -72,7 +72,7 @@
 cdb_advance_fd (struct cd_buf *cdb, char const *dir)
 {
   int new_fd = openat (cdb->fd, dir,
-                       O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK);
+                       O_DIRECTORY | O_NOCTTY | O_NONBLOCK);
   if (new_fd < 0)
     return -1;
 
--- lib/save-cwd.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/save-cwd.c	2013-03-05 19:34:45.000000000 -0300
@@ -64,7 +64,7 @@
 {
   cwd->name = NULL;
 
-  cwd->desc = open (".", O_SEARCH);
+  cwd->desc = open (".", 0);
   if (!GNULIB_FCNTL_SAFER)
     cwd->desc = fd_safer (cwd->desc);
   if (cwd->desc < 0)
--- lib/openat-proc.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/openat-proc.c	2013-03-05 19:37:31.000000000 -0300
@@ -75,7 +75,7 @@
          running on Solaris 10.  */
 
       int proc_self_fd = open ("/proc/self/fd",
-                               O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK);
+                               O_DIRECTORY | O_NOCTTY | O_NONBLOCK);
       if (proc_self_fd < 0)
         proc_status = -1;
       else
--- lib/openat.c.orig	2013-01-02 09:34:46.000000000 -0300
+++ lib/openat.c	2013-03-05 19:38:52.000000000 -0300
@@ -265,7 +265,7 @@
 openat_needs_fchdir (void)
 {
   bool needs_fchdir = true;
-  int fd = open ("/", O_SEARCH);
+  int fd = open ("/", 0);
 
   if (0 <= fd)
     {
