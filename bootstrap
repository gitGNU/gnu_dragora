#! /bin/sh
#  Builder of custom stages (cross compilers, GNU/Linux distributions)
#
#  Copyright (C) 2014, 2015, 2016  Matias A. Fonzo
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Override locale settings
LC_ALL=C
LANGUAGE=C

export LC_ALL LANGUAGE

# Exit immediately on any error
set -o errexit

# Get the current working directory of the recipe: printing the absolute
# pathname or just prints the current directory in case of fails
CWD="$(cd "$(dirname -- "$0" 2> /dev/null)" ; printf %s "$PWD")"

# Functions
show_help() {
  printf '%s\n' \
   "Usage: $0 [options] [file ...]"                                                  \
   "Builder of custom stages."                                                       \
   ""                                                                                \
   "Defaults for the options are specified in brackets."                             \
   ""                                                                                \
   "Options:"                                                                        \
   "  -h          display this help and exit"                                        \
   "  -V          output version information and exit"                               \
   "  -S          don't strip unneeded or debugging symbols from files"              \
   "  -a          target architecture [${arch}]"                                     \
   "  -c          output directory for cross compiler(s) [${crossdir}]"              \
   "  -i          include path of a previous cross-compiler for static compilation"  \
   "  -j          parallel jobs for the compiler [${jobs}]"                          \
   "  -k          keep (don't delete) source directory"                              \
   "  -r          output directory for the root system [${rootdir}]"                 \
   "  -s          sets the stage number to build [${stage}]"                         \
   "  -t          temporary directory for compilation [${tmpdir}]"                   \
   ""                                                                                \
   "Some influential environment variables:"                                         \
   "  VENDOR      VENDOR to reflect on the target triplet"                           \
   ""                                                                                \
   "Target architectures:"
   for file in ""${CWD}/bootstrap.d/target/*"" ; do
     printf %s "${file##*/} "
   done
   unset file ; echo
}

# To check if the specified argument is a valid number
_isNumber() {
  if ! printf %s "$1" | grep -q -E '^[-+]?([0-9]+\.?|[0-9]*\.[0-9]+)$' ; then
    echo "bootstrap: \"${OPTARG}\" need to be a valid number for -${option}." 1>&2
    exit 1
  fi
}

# To strip binaries and libraries
stripFiles() {
  if [ "$strip" = "strip" ] ; then
    # Quote all characters with backslashes,
    # protects embedded whitespace in filenames
    quote() { sed 's/./\\&/g' ; }

    directory="$1"

    echo "==> Stripping binaries and libraries in \`$directory' (if any) ..."
    find "$directory" -type f | quote | xargs file | \
     awk '/ELF/ && (/executable/ || /shared object/) && /not stripped/' | \
      cut -f 1 -d : | quote | xargs strip --strip-unneeded 2> /dev/null || true

    find "$directory" -type f | quote | xargs file | grep 'current ar archive' | \
     cut -f 1 -d : | quote | xargs strip --strip-debug 2> /dev/null || true

    unset directory
  fi
}

# Delete directories if does not exist
rmIfDir() {
  local directory

  for directory in "$@" ; do
    if [ -d "$directory" ] ; then
      echo "Deleting $directory ..."
      rm -rf "$directory"
    fi
  done
}

# Default variable values
strip=strip
arch="$(uname -m)"
tmpdir=/tmp/bootstrap
crossdir="${tmpdir}/compiler"
rootdir="${tmpdir}/root"
worktree="$CWD"
jobs=1
keepdir=nokeepdir
stage=0

# Parse options
while getopts ":hSVk a:c:i:j:r:s:t:" option ; do
  case "$option" in
    S)
      strip=nostrip
      ;;
    a)
      arch="$OPTARG"
      ;;
    c)
      crossdir="$OPTARG"
      ;;
    i)
      includepath="$OPTARG"
      ;;
    j)
      jobs="$OPTARG"
      _isNumber "$jobs"
      ;;
    k)
      keepdir=keepdir
      ;;
    r)
      rootdir="$OPTARG"
      ;;
    s)
      stage="$OPTARG"
      _isNumber "$stage"
      ;;
    t)
      tmpdir="$OPTARG"
      ;;
    V)
      printf '%s\n' \
       "bootstrap 2.7" \
       "Copyright (C) 2014, 2015, 2016  Matias A. Fonzo." \
       "License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>" \
       "This is free software: you are free to change and redistribute it." \
       "There is NO WARRANTY, to the extent permitted by law."
      exit 0
      ;;
    h)
      show_help
      exit 0
      ;;
    :)
      printf '%s\n' \
       "The option '-${OPTARG}' requires an argument" \
       "Usage: $0 [-hSVk] [-a <arch>] [-c <crossdir>] [-i <path>] [-j <jobs>] [-r <rootdir>] [-s <stage>] [-t <tmpdir>] [file ...]" 1>&2
      exit 1
      ;;
    \?)
      printf '%s\n' \
       "bootstrap: illegal option -- '-${OPTARG}'" \
       "Usage: $0 [-hSVk] [-a <arch>] [-c <crossdir>] [-i <path> ] [-j <jobs>] [-r <rootdir>] [-s <stage>] [-t <tmpdir>] [file ...]" 1>&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND - 1))"

# Load target
if [ -f "${CWD}/bootstrap.d/target/$arch" ] ; then
  echo "Loading target: $arch ..."
  . "${CWD}/bootstrap.d/target/$arch"
else
  printf '%s\n' \
    "Unrecognized architecture -- '$arch'" \
    "Try '$0 -h' for more information." 1>&2
  exit 1
fi

# Compose 'crossdir' adding the target triplet
crossdir="${crossdir}/$target"

# Set default path
PATH="${crossdir}/bin:${PATH}"

# To prefix 'includepath' if -i was given
if [ -n "$includepath" ] ; then
  if [ -d "${includepath}/bin" ] ; then
    PATH="${includepath}/bin:${crossdir}/bin:${PATH}"
  else
    echo "bootstrap: A valid \"${includepath}/bin\" directory is required." 1>&2
    exit 1
  fi
fi

export PATH

# Set default mask
umask 022

# Create required directories
mkdir -p "${tmpdir}/sources"

# Process the files from stage number
for file in ""${CWD}/bootstrap.d/stage/${stage}/${@:-??-*}"" ; do

  file="${file##*/}"	# Get the basename

  if [ ! -f "${CWD}/bootstrap.d/stage/${stage}/$file" ] ; then
    echo "bootstrap: File '${CWD}/bootstrap.d/stage/${stage}/$file' not found or not regular." 1>&2
    exit 1
  fi

  if [ ! -x "${CWD}/bootstrap.d/stage/${stage}/$file" ] ; then
    echo "bootstrap: I won't build '${stage}/$file'.  File not executable." 1>&2
    continue;
  fi

  # Stage pre-settings.
  #
  # Create sysroot directory, recreating symlink for the stage 0
  if [ "$stage" = "0" ] ; then
    mkdir -p "${crossdir}/$target"
    if [ ! -e "${crossdir}/${target}/usr" ] ; then
      ln -sf . "${crossdir}/${target}/usr"
    fi
  fi

  # Create tools directory if needed, recreating symlink for the stage 1
  if [ "$stage" = "1" ] ; then
    mkdir -p "${rootdir}/tools"
    ln -sf "${rootdir}/tools" /
  fi

  # Load script
  echo "==> File \"${file##*/}\" from stage $stage in progress ..."
  . "${CWD}/bootstrap.d/stage/${stage}/$file"

  # Back to the current working directory
  if ! cd "$CWD" 2> /dev/null ; then
    echo "bootstrap: Unable to return to the current working directory (${CWD})." 1>&2
    exit 2
  fi

  # Clean up source directories
  if [ "$keepdir" = "nokeepdir" ] ; then
    echo "==> Cleaning up source directories ..."
    name="${file#*-}"
    rmIfDir ""${tmpdir}/sources/$name*""
    unset name
  fi
done

# Final steps
case "$stage" in
  0)
    rmIfDir "${crossdir}/share/info" "${crossdir}/share/man"
    stripFiles "$crossdir"
    ;;
  1)
    rmIfDir "${rootdir}/tools/share/info" "${rootdir}/tools/share/man"
    stripFiles "${rootdir}/tools"
    ;;
esac

