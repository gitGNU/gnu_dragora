# Build script for gcc (final)
#
# Copyright (C) 2014, 2015 Matias A. Fonzo.
#
# This script is free software: you have unlimited permission
# to copy, distribute and modify it.

version=4.9.3

echo "Unpacking gcc-${version} ..."
rm -rf "${tmpdir}"/sources/gcc-${version}
tar xf "${worktree}"/sources/gcc-${version}.tar.lz -C "${tmpdir}"/sources

# Build instructions
cd "${tmpdir}"/sources/gcc-${version}

patch -Np0 -i "${worktree}"/patches/gcc/gcc-nofixincludes
patch -Np1 -i "${worktree}"/patches/gcc/gcc-4.9.2-musl.diff

# Build GCC built-in prerequisites
for file in "${worktree}"/sources/gmp-*.tar.lz "${worktree}"/sources/mpfr-*.tar.lz "${worktree}"/sources/mpc-*.tar.lz ; do
  if [ ! -e "$file" ] ; then
    echo "The built-in prerequisite \`${file##*/}' for GCC is required." 1>&2
    exit 1
  fi

  # Unpack prerequisite
  tar xf "$file"

  # Basename
  file="${file##*/}"
  file="${file%.tar*}"

  # To extract name and version
  name="${file%-*}"
  vern="${file#*-}"

  # Remove any words from the version number
  vern="$(printf %s "$vern" | tr -d '[:lower:]')"

  # Move the source as the expected directory name
  mv "${name}-${vern}" "$name"
done
unset file name vern

# Provide an (official) updated version of the config.sub file 
# in order to match correctly the target triplet for a musl OS.
#
# This is until new versions could provide the updated file.
#
cp -f "${worktree}"/patches/common/config.sub gmp/configfsf.sub

# Build in a separate directory
rm -rf ../gcc-build
mkdir ../gcc-build
cd ../gcc-build

../gcc-${version}/configure \
 --prefix="$crossdir" \
 --enable-languages=c,c++ \
 --enable-clocale=generic \
 --enable-threads=posix \
 --enable-__cxa_atexit \
 --enable-checking=release \
 --build=$host \
 --host=$host \
 --target=$TARGET \
 --with-sysroot="${crossdir}"/$TARGET \
 --with-mpfr-include="${PWD}"/../gcc-${version}/mpfr/src \
 --with-mpfr-lib="${PWD}"/mpfr/src/.libs \
 --disable-nls \
 --disable-libmudflap \
 --disable-libsanitizer \
 --disable-libstdcxx-pch \
 --without-ppl \
 --without-cloog \
 $GCC_OPTS $MULTILIB

make -j${jobs}
make install

